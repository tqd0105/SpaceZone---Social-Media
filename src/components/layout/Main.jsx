import { useState, useEffect } from "react";
import PostForm from "../main/CreatePost/PostForm";
import PostList from "../main/CreatePost/PostList";
import Story from "../main/Story";
import Refresh from "../../assets/icons/main/CreatePost/refresh.png";
const API_URL = import.meta.env.VITE_API_URL

function Main() {
  const [posts, setPosts] = useState([]);
  const [comments, setComments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [deletingPostId, setDeletingPostId] = useState(null); 
  const [isShowNewPostNoti, setIsShowNewPostNoti] = useState(false); 

  useEffect(() => {
    fetch(`${API_URL}/posts`)
      .then((res) => res.json())
      .then((data) => setPosts(data))
      .catch((err) => console.log(err));
  }, []);

  useEffect(() => {
    fetch(`${API_URL}/comments`)
      .then((res) => res.json())
      .then((data) => setComments(data))
      .catch((err) => console.log(err));
  }, []);

  const handleUpload = async (formData) => {
    try {
      const token = localStorage.getItem("token"); // üîπ L·∫•y token t·ª´ localStorage
      if (!token) {
        console.log("‚ùå Kh√¥ng c√≥ token, h√£y ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
      }

      const res = await fetch(`${API_URL}/posts`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`, // ‚úÖ G·ª≠i token k√®m theo
        },
        body: formData,
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      }

      const newPost = await res.json();
      setPosts([newPost, ...posts]);
    } catch (err) {
      console.log("‚ùå L·ªói upload:", err.message);
    }
  };

  const handleDelete = async (postId) => {
    console.log("üõ† postId nh·∫≠n ƒë∆∞·ª£c:", postId);
    setLoading(true);
    setDeletingPostId(postId);

    try {
      const token = localStorage.getItem("token");
      console.log("üõ† Token:", token); // Log token
      if (!token) {
        console.log("‚ùå Kh√¥ng c√≥ token, h√£y ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
      }

      console.log("üõ† G·ªçi API x√≥a:", `${API_URL}/posts/${postId}`); // Log API URL
      const res = await fetch(`${API_URL}/posts/${postId}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      console.log("üõ† Ph·∫£n h·ªìi t·ª´ API:", res); // Log ph·∫£n h·ªìi

      if (!res.ok) {
        const errorData = await res.json();
        console.error("‚ùå D·ªØ li·ªáu l·ªói t·ª´ API:", errorData); // Log d·ªØ li·ªáu l·ªói
        throw new Error(errorData.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      }

      console.log("‚úÖ X√≥a b√†i vi·∫øt th√†nh c√¥ng");

      if (posts && Array.isArray(posts)) {
        setPosts(posts.filter((post) => post._id !== postId));
      } else {
        console.log("‚ùå Danh s√°ch b√†i vi·∫øt kh√¥ng h·ª£p l·ªá!");
      }
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a b√†i vi·∫øt:", err.message);
    } finally {
      setLoading(false);
    }
  };


  const handleAddComment = async (postId, text) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        console.log("‚ùå Kh√¥ng c√≥ token, h√£y ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
      }
  
      const res = await fetch(`${API_URL}/comments`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ postId, text }),
      });
  
      if (!res.ok) {
        throw new Error("L·ªói khi th√™m b√¨nh lu·∫≠n");
      }
  
      const newComment = await res.json();
  
      // C·∫≠p nh·∫≠t b√¨nh lu·∫≠n m·ªõi v√†o state v√† l∆∞u l·∫°i v√†o localStorage
      const updatedComments = [...comments, newComment];
      setComments(updatedComments);
      localStorage.setItem(`comments_${postId}`, JSON.stringify(updatedComments)); // L∆∞u v√†o localStorage
      console.log("‚úÖ Th√™m b√¨nh lu·∫≠n th√†nh c√¥ng");
  
    } catch (err) {
      console.log("‚ùå L·ªói th√™m b√¨nh lu·∫≠n:", err.message);
    }
  };

  useEffect(() => {
    const fetchAllComments = async () => {
      try {
        const commentPromises = posts.map((post) =>
          fetch(`${API_URL}/comments/${post._id}`).then((res) => {
            if (!res.ok) throw new Error("L·ªói khi l·∫•y b√¨nh lu·∫≠n");
            return res.json();
          })
        );
  
        const allCommentsArrays = await Promise.all(commentPromises);
        const allComments = allCommentsArrays.flat(); // G·ªôp th√†nh 1 m·∫£ng duy nh·∫•t
  
        setComments(allComments); // C·∫≠p nh·∫≠t 1 l·∫ßn
      } catch (err) {
        console.error("‚ùå L·ªói khi fetch b√¨nh lu·∫≠n:", err.message);
      }
    };
  
    if (posts.length > 0) fetchAllComments();
  }, [posts]);
  

  const handleDeleteComment = async (commentId) => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        console.log("‚ùå Kh√¥ng c√≥ token, h√£y ƒëƒÉng nh·∫≠p l·∫°i!");
        return;
      }

      const res = await fetch(
        `${API_URL}/comments/${commentId}`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
      }

      console.log("‚úÖ X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng");
      setComments((prev) => prev.filter((c) => c._id !== commentId)); // C·∫≠p nh·∫≠t UI
    } catch (err) {
      console.error("‚ùå L·ªói x√≥a b√¨nh lu·∫≠n:", err.message);
    }
  };

  return (
    <div className="lg:w-[45%] m_pb-80px">

        {isShowNewPostNoti && (
        <div className="fixed flex-row-center gap-2 top-24 left-1/2 cursor-pointer -translate-x-1/2  z-50 bg-gray-900 text-white p-4 rounded-lg shadow-2xl hover:bg-gray-700 animate__animated animate__fadeIn animate_slow" onClick={()=>window.location.reload()}>
          <img src={Refresh} width={20} height={20} alt="Refresh" className="animate__animated animate__rubberBand animate_slow animate__infinite" />
          <span className="font-bold">ƒê√£ c√≥ c·∫≠p nh·∫≠t m·ªõi!</span>
        </div>

         )}
        <PostForm
          onUpload={handleUpload}
          setIsShowNewPostNoti={setIsShowNewPostNoti}
        />
      <Story />
      <PostList
      posts={posts}
      comments={comments}
        onDeleteComment={handleDeleteComment}
        onAddComment={handleAddComment}
        onDelete={handleDelete}
        
        loading={loading}
        deletingPostId={deletingPostId}
        setComments={setComments}
      />
    </div>
  );
}

export default Main;
